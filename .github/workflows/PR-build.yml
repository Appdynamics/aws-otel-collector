# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: PR Build

on:
  pull_request:
    branches: [ main ]  

env:
  IMAGE_NAME: aws-otel-collector
  PACKAGING_ROOT: build/packages 

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    # Set up building environment, patch the dev repo code on dispatch events.  
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13

    - uses: actions/checkout@v2

    # Unit Test and attach test coverage badge
    - name: Unit Test
      run: make test

    - name: Upload Coverage report to CodeCov
      uses: codecov/codecov-action@v1.0.12
      with:
        file: ./coverage.txt

    # Build and archive binaries into cache.
    - name: Build Binaries
      run: make build

    - name: Cache binaries
      uses: actions/cache@v2
      with:
        key: "cached_binaries_${{ github.run_id }}"
        path: build

    # upload the binaries to artifact as well because cache@v2 hasn't support windows
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: binary_artifacts
        path: build

  packaging-msi:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download built artifacts
        uses: actions/download-artifact@v2
        with:
          name: binary_artifacts
          path: build

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create msi file using candle and light
        run: .\tools\packaging\windows\create_msi.ps1

      - name: Upload the msi
        uses: actions/upload-artifact@v2
        with:
          name: msi_artifacts
          path: build/packages

  packaging-rpm:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive rpms into cache.
      - uses: actions/checkout@v2

      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Display structure of downloaded files
        run: ls -R

      - name: Build RPM
        run: |
          ARCH=x86_64 DEST=build/packages/linux/amd64 tools/packaging/linux/create_rpm.sh
          ARCH=aarch64 DEST=build/packages/linux/arm64 tools/packaging/linux/create_rpm.sh
      - name: Cache rpms
        uses: actions/cache@v2
        with:
          key: "cached_rpms_${{ github.run_id }}"
          path: build/packages

  packaging-deb:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive debs into cache.
      - uses: actions/checkout@v2

      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Build Debs
        run: |
          ARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 DEST=build/packages/debian/amd64 tools/packaging/debian/create_deb.sh
          ARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 DEST=build/packages/debian/arm64 tools/packaging/debian/create_deb.sh
      - name: Cache Debs
        uses: actions/cache@v2
        with:
          key: "cached_debs_${{ github.run_id }}"
          path: build/packages
   
          
  packaging-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive image into cache
      - uses: actions/checkout@v2

      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: prepare docker building workspace
        run: |
          mkdir -p build/image-build/
          cp cmd/awscollector/Dockerfile build/image-build/
          cp ./config.yaml build/image-build/
          cp build/linux/aoc_linux_x86_64 build/image-build/awscollector
          
      - name: Build Image
        run: docker build -t $IMAGE_NAME build/image-build
      
      - name: Extract the Image file
        run: |
          mkdir -p $PACKAGING_ROOT
          docker save --output $PACKAGING_ROOT/$IMAGE_NAME.tar $IMAGE_NAME
      - name: Cache Image
        uses: actions/cache@v2
        with:
          key: "cached_image_${{ github.run_id }}"
          path: "${{ env.PACKAGING_ROOT }}"
   
  get-test-cases:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2.1.4

      - name: Get all the testing suites
        id: set-matrix
        run: | 
          matrix=$(python e2etest/get-testcases.py local_matrix)
          echo "::set-output name=matrix::$matrix"
          
      - name: List testing suites
        run: |
          echo ${{ steps.set-matrix.outputs.matrix }}
          
  run-test-case:
    runs-on: ubuntu-latest
    needs: [get-test-cases, packaging-image]
    strategy:
      matrix: ${{ fromJson(needs.get-test-cases.outputs.matrix) }}
    
    steps:
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Setup Python
        uses: actions/setup-python@v2.1.4
      
      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "cached_packages_${{ github.run_id }}"
      
      - name: Load image
        run: docker load < build/packages/$IMAGE_NAME.tar
        
      - name: Run test
        run: testing-framework/terraform/mock && terraform init && terraform apply -auto-approve -var="local_image=$IMAGE_NAME" -var="testcase=../testcases/${{ matrix.testcase }}" -var-file="../testcases/${{ matrix.testcase }}/parameters.tfvars" 
